# import the necessary packages
from collections import deque
import imutils
from imutils.video import VideoStream
import numpy as np
import argparse
import cv2
import time
import matplotlib.ticker as plticker
import matplotlib.pyplot as plt
import math

myInterval = 75
Grids =[]
centrex = [] #Gives the x range for each grid 
Centrex = []
centrey = [] #Gives the y range for each grid 
Centrey =[]
gridrange=[] #Gives the x,y range for each grid 
contour_coord = []
font                   = cv2.FONT_HERSHEY_SIMPLEX
fontScale              = 1
fontColor              = (255,0,0)
thickness              = 1
lineType               = 1

width = 1500 
height = 1500 
## Importing necessary functions: 

def gridoverlay():
    global frame 
    global ny

    frame = cv2.resize(frame, (width,height),interpolation=cv2.INTER_AREA)

       # Draw the grid 
    for i in range(0, frame.shape[0], int(myInterval)):
        cv2.line(frame, (0, i), (frame.shape[1], i), (0, 255, 0), 1)        ## Horizontal lines
    for i in range(0, frame.shape[1], int(myInterval)):
        cv2.line(frame, (i, 0), (i, frame.shape[0]), (0, 255, 0), 1)

    nx = int(frame.shape[0]/myInterval)
    ny = int(frame.shape[1]/myInterval)


    for j in range(ny):
        y=(myInterval/2+j*myInterval)
        for i in range(nx):
            x=(myInterval/2.+float(i)*myInterval)
            frame = cv2.putText(frame,
            '{:d}'.format(i+j*nx), 
            (int(x),int(y)), 
            font, 
            fontScale,
            fontColor,
            thickness,
            lineType)
            
            # if len(centrex) < (ny*nx):
            centrex.append(x) 
            centrey.append(y)

    for k in range((int(ny)*int(nx))):
        Centrex = [(centrex[k]-(myInterval/2)), (centrex[k]+(myInterval/2))]
        Centrey = [(centrey[k]-(myInterval/2)), (centrey[k]+(myInterval/2))]
        gridrange.append([(Centrex),Centrey])
def grid_detection(): 
    global grid
    for s in gridrange:
        xrange = s[0] 
        yrange = s[1]


        if contourx >= xrange[0] and contourx <= xrange[1] and contoury >= yrange[0] and contoury <= yrange[1]:
            grid = gridrange.index(s)
def grid_detection_for_path(): 
    global grid
    global grid1
    global grid2
    for s in gridrange:
        xrange = s[0] 
        yrange = s[1]


        if current_node[0] >= xrange[0] and current_node[0] <= xrange[1] and current_node[1] >= yrange[0] and current_node[1] <= yrange[1]:
            grid1 = gridrange.index(s)
        if next_node[0] >= xrange[0] and next_node[0] <= xrange[1] and next_node[1] >= yrange[0] and next_node[1] <= yrange[1]:
            grid2 = gridrange.index(s)
def closest_coordinates3(coordinates, reference, n=3):
    closest_coords = []
    distances = []
    for coord in coordinates:
        distance = math.sqrt((coord[0]-reference[0])**2 + (coord[1]-reference[1])**2)
        distances.append(distance)
    for i in range(n):
        min_distance = min(distances)
        index = distances.index(min_distance)
        closest_coords.append(coordinates[index])
        distances[index] = float('inf')
    return closest_coords


## 1. Need it to take an image first: 

cap = cv2.VideoCapture(0) # video capture source camera (Here webcam of laptop) 
time.sleep(1)
ret,frame = cap.read() # return a single frame in variable `frame`

gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

blur = cv2.GaussianBlur(gray, (3,3), 0)

# Apply thresholding to obtain a binary image
_, binary = cv2.threshold(blur, 127, 255, cv2.THRESH_BINARY)

# Apply erosion to the binary image
kernel = np.ones((5, 5), np.uint8)
erosion = cv2.erode(binary, kernel, iterations=2)

# Find contours on the eroded image
contours, hierarchy = cv2.findContours(erosion, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
mask = np.zeros_like(frame)

for cnt in contours:
    area = int(cv2.contourArea(cnt))
    if area > 130000 and area < 140000:
        cv2.drawContours(frame, cnt, -1,(0,255,0),3)
        cv2.drawContours(mask, [cnt], -1, (255,255,255), -1)

kernel = np.ones((5, 5), np.uint8)
skeleton = cv2.erode(mask, kernel, iterations = 4) 
mask = cv2.bitwise_not(skeleton)

cv2.imshow("Mask", mask)
cv2.waitKey()
cv2.destroyAllWindows()

## Check if the mask is appropriate, if not change the iteration. 

## 2. Detecting the contours on the mask. This step can perhaps be elimiaed. 

frame = cv2.resize(mask, (width,height),interpolation=cv2.INTER_AREA)

gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
ret, thresh = cv2.threshold(gray, 127, 255, 0)

# find contours in the binary image
cnts, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

gridoverlay()       # Apply the grids to the image and obtain the gridrange

for cnt in cnts:
    area = cv2.contourArea(cnt)
    if area > 100 and area < 1957201.0:
        cv2.drawContours(frame, [cnt], -1, (0, 255, 0), 5)
        for i in cnt:
            contourx, contoury = i[0]
            contour_coord.append([contourx,contoury])
            grid_detection()
            Grids.append(grid)

Grids = [*set(Grids)]
# Grids.sort()
print("Path Grids are: ",Grids)    
print("Number of grids  = ",len(Grids))

Center = []
nodes_visted = []
error_nodes = []

for i in Grids:
    cv2.circle(frame, (int(centrex[i]),int(centrey[i])), 5, 255,5)
    Center.append((int(centrex[i]),int(centrey[i])))

Center_copy = Center.copy()     #### Needs to be after Center has been created thus dont change location. 

starting_grid = 199
ending_grid = 140

current_node = ((int(centrex[starting_grid]),int(centrey[starting_grid])))
ending_node  = ((int(centrex[ending_grid]),int(centrey[ending_grid])))
for i in range(len(Center)):
    closest = closest_coordinates3(Center, current_node, 2)
    next_node = closest[1]
    deltax = next_node[0] - current_node[0]
    deltay = next_node[1] - current_node [1]
    if deltax != 0 and deltay != 0:
        error_nodes.append(grid1) 
        Center_copy.remove((int(centrex[grid1]),int(centrey[grid1])))
    try: 
        Center.remove(closest[0])
    except: 
        pass
    current_node = next_node
    if current_node  == ending_node:
        break 

current_node = ((int(centrex[starting_grid]),int(centrey[starting_grid])))
ending_node  = ((int(centrex[ending_grid]),int(centrey[ending_grid])))
for i in range(len(Center_copy)):
    closest = closest_coordinates3(Center_copy, current_node, 2)
    next_node = closest[1]
    deltax = next_node[0] - current_node[0]
    deltay = next_node[1] - current_node [1]
    grid_detection_for_path()
    nodes_visted.append(grid1)
    if deltax != 0 and deltay != 0:
        print("Error", grid1)
    if deltax > 0: 
        direction = "Right"
    elif deltax < 0:
        direction = "Left"
    if deltay > 0:
        direction = "Down"
    elif deltay < 0: 
        direction = "Up"

    print(grid1, direction, "to ", grid2 )
    Center_copy.remove(closest[0])
    current_node = next_node
    if current_node  == ending_node:
        print("Ending node: ", grid2, "reached.")
        break 

cv2.imshow("frame", frame)
cv2.waitKey()
cv2.destroyAllWindows()